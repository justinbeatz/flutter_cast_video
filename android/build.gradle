plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android' version '1.9.24'
}

group 'it.aesys.flutter_cast_video'
version '1.2-ENABLEMEDIA'

android {
    namespace 'it.aesys.flutter_cast_video'
    compileSdk 35

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        minSdk 25
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            jvmTarget = "17"
        }
    }

    lint {
        disable 'InvalidPackage'
        disable 'ResourceCycle' // Suppress ResourceCycle error
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.22"
    // ChromeCast dependencies
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'com.google.android.gms:play-services-cast-framework:21.5.0'
}

def localPropertiesFile = new File(rootProject.projectDir, 'local.properties')
def properties = new Properties()

if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        properties.load(reader)
    }
}

def flutterProjectRoot = properties.getProperty('flutter.project.root') ?: rootProject.projectDir
def plugins = new Properties()
def pluginsFile = new File(flutterProjectRoot, '.flutter-plugins')
if (pluginsFile.exists()) {
    pluginsFile.withReader('UTF-8') { reader ->
        plugins.load(reader)
    }
}

dependencies {
    plugins.each { name, path ->
        def pluginDirectory = file(path)
        implementation project(":${name}")
    }
}